name: Deploy Backend and Frontend to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: sapitos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          Backend/package-lock.json
          frontend2/package-lock.json

    - name: Install backend dependencies
      run: |
        cd Backend
        npm ci
          - name: Install frontend dependencies
      run: |
        cd frontend2
        npm ci

    - name: Run ESLint on Frontend
      run: |
        cd frontend2
        echo "Running ESLint checks on frontend..."
        npm install eslint@8.57.0 --save-dev
        npx eslint . --config eslint.config.cjs || {
          echo "❌ ESLint found issues in frontend code"
          exit 1
        }
        echo "✅ Frontend ESLint checks passed"
        
    - name: Run ESLint on Backend
      run: |
        cd Backend
        echo "Running ESLint checks on backend..."
        npm install eslint@8.57.0 --save-dev
        npx eslint . --config eslint.config.js || {
          echo "❌ ESLint found issues in backend code"
          exit 1
        }
        echo "✅ Backend ESLint checks passed"

    - name: Build frontend
      run: |
        cd frontend2
        npm run build

    - name: Prepare backend for deployment
      run: |
        # Copy frontend build to backend public folder
        mkdir -p Backend/public
        cp -r frontend2/dist/* Backend/public/
        
        # Create web.config for Azure App Service (Node.js)
        cat > Backend/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="iisnode" path="index.js" verb="*" modules="iisnode"/>
            </handlers>
            <rewrite>
              <rules>
                <rule name="StaticContent">
                  <action type="Rewrite" url="public{REQUEST_URI}"/>
                </rule>
                <rule name="DynamicContent">
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                  </conditions>
                  <action type="Rewrite" url="index.js"/>
                </rule>
              </rules>
            </rewrite>
            <iisnode watchedFiles="web.config;*.js" loggingEnabled="true"/>
          </system.webServer>
        </configuration>
        EOF

        # Create a health check endpoint
        echo "// Health check endpoint for Azure monitoring
        app.get('/health', (req, res) => {
          res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
        });" >> Backend/index.js

    - name: Clean previous deployment files
      run: |
        rm -f backend.zip
        
    - name: Zip backend
      run: |
        cd Backend
        zip -r ../backend.zip . -x "node_modules/*" ".env" "*.git*" ".env.*" "tests/*"
        
    - name: Deploy to Azure Web App via zipdeploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: backend.zip

    - name: Verify deployment
      run: |
        echo "Deployment completed. Please check your Azure Web App at: https://sapitos.azurewebsites.net"

    - name: Test login functionality
      run: |
        echo "Testing login functionality..."
        # Esperar un momento para que el servicio esté completamente iniciado
        sleep 60
        
        # Realizar prueba de login
        LOGIN_RESPONSE=$(curl -s -X POST https://sapitos.azurewebsites.net/auth/login \
          -H "Content-Type: application/json" \
          -d '{"correo":"test@example.com","contrasena":"test123"}')
        
        # Verificar si la respuesta contiene un token (éxito) o un mensaje de error
        if echo "$LOGIN_RESPONSE" | grep -q "token"; then
          echo "✅ Login test passed - Response contains authentication token"
          echo "Response: $LOGIN_RESPONSE"
        else
          echo "❌ Login test failed"
          echo "Response: $LOGIN_RESPONSE"
          # No hacemos fallar el workflow ya que esto es solo una prueba
        fi